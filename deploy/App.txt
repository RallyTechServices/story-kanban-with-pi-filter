<!DOCTYPE html>
<html>
<head>
    <title>Story Kanban with Filter</title>
    <!--  (c) 2015,2016 CA Technologies.  All Rights Reserved. -->
    <!--  Build Date: Fri Apr 29 2016 08:31:32 GMT-0400 (EDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Fri Apr 29 2016 08:31:32 GMT-0400 (EDT)";
        var CHECKSUM = 33102500851;
    </script>
    
    <script type="text/javascript" src="/apps/2.1/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
Ext.define('Rally.apps.kanban.Column', {
    extend: 'Rally.ui.cardboard.Column',
    alias: 'widget.kanbancolumn',

    config: {
        hideReleasedCards: false
    },

    getStoreFilter: function (model) {
        var filters = [];
        Ext.Array.push(filters, this.callParent(arguments));
        if (model.elementName === 'HierarchicalRequirement') {
            if (this.context.getSubscription().StoryHierarchyEnabled) {
                filters.push({
                    property: 'DirectChildrenCount',
                    value: 0
                });
            }
        }

        if (this.hideReleasedCards) {
            filters.push({
                property: 'Release',
                value: null
            });
        }

        return filters;
    }
});


/**
 * A picker which allows selecting one or more fields and a configurable right side action on bound list.
 */
Ext.define('Rally.apps.kanban.ColumnCardFieldPicker', {
    extend: 'Rally.ui.picker.FieldPicker',
    alias: 'widget.kanbancolumncardfieldpicker',
    margin: 0,

    config: {
        /**
         * @cfg {String}
         * Initial text shown on right side of bound list
         */
        rightInitialText: 'Apply to All',

        /**
         * @cfg {String}
         * Text shown on right side of bound list after click
         */
        rightUpdateText: 'Remove from All',

        /**
         * @cfg {String}
         * Class for right side of bound list
         */
        rightCls: 'rui-picker-right-action hyperlink'

    },


    initComponent: function() {
        this.addEvents(
            /**
             * @event rightactionclick
             * Fires when a right side text was clicked in the picker
             * @param {Rally.ui.picker.MultiObjectPicker} picker This picker
             * @param {Object} value The newly clicked value
             * @param {Object[]} values The currently selected values
             * @param {Ext.Element} The element clicked
             */
            'rightactionclick'
        );
        this.applyToAllFields = [];
        this.callParent(arguments);
    },

    onListItemDeselect: function(record, event, itemEl) {
        var rightActionEl = this._getRightActionEl(record);

        if (rightActionEl && event.within(rightActionEl)) {
            var initialTextClicked = rightActionEl.getHTML() === this.rightInitialText;
            this.fireEvent('rightactionclick', this, record, this.getValue(), initialTextClicked);

            if (initialTextClicked) {
                this.applyToAllFields.push(record.get(this.selectionKey));
                this._selectRowCheckbox(record.get(this.recordKey));
                rightActionEl.update(this.rightUpdateText);
                return false;
            } else {
                Ext.Array.remove(this.applyToAllFields, record.get(this.selectionKey));
                rightActionEl.update(this.rightInitialText);
            }
        } else {
            Ext.Array.remove(this.applyToAllFields, record.get(this.selectionKey));
        }
        this.callParent(arguments);
    },

    getRightListHtml: function(recordData) {
        var tpl = '';
        if (recordData.groupSelected === 'Selected Fields' &&
            !Ext.Array.contains(this.alwaysSelectedValues, recordData[this.selectionKey])) {
            var text = Ext.Array.contains(this.applyToAllFields, recordData[this.selectionKey]) ? this.rightUpdateText: this.rightInitialText;
            tpl = '<div class="' + this.rightCls + '">' + text + '</div>';
        }
        return tpl;
    },

    _getRightActionEl: function(record) {
        var rightSelector = Ext.String.splitWords(this.rightCls).join('.');
        return this.list.getEl().down('.rui-multi-object-picker-option-id-' + record.get(this.recordKey) + ' .' + rightSelector);
    }

});
/**
 * Allows configuration of wip and schedule state mapping for kanban columns
 *
 *      @example
 *      Ext.create('Ext.Container', {
 *          items: [{
 *              xtype: 'kanbancolumnsettingsfield',
 *              value: {}
 *          }],
 *          renderTo: Ext.getBody().dom
 *      });
 *
 */
Ext.define('Rally.apps.kanban.ColumnSettingsField', {
    extend: 'Ext.form.field.Base',
    alias: 'widget.kanbancolumnsettingsfield',
    plugins: ['rallyfieldvalidationui'],
    requires: [
        'Rally.ui.combobox.ComboBox',
        'Rally.ui.TextField',
        'Rally.ui.combobox.FieldValueComboBox',
        'Rally.ui.plugin.FieldValidationUi',
        'Rally.apps.kanban.ColumnCardFieldPicker'
    ],

    fieldSubTpl: '<div id="{id}" class="settings-grid"></div>',

    width: 600,
    cls: 'column-settings',

    config: {
        /**
         * @cfg {Object}
         *
         * The column settings value for this field
         */
        value: undefined,

        defaultCardFields: ''
    },

    onDestroy: function() {
        if (this._grid) {
            this._grid.destroy();
            delete this._grid;
        }
        this.callParent(arguments);
    },

    onRender: function() {
        this.callParent(arguments);

        this._store = Ext.create('Ext.data.Store', {
            fields: ['column', 'shown', 'wip', 'scheduleStateMapping', 'stateMapping', 'cardFields'],
            data: []
        });

        this._grid = Ext.create('Rally.ui.grid.Grid', {
            autoWidth: true,
            renderTo: this.inputEl,
            columnCfgs: this._getColumnCfgs(),
            showPagingToolbar: false,
            showRowActionsColumn: false,
            enableRanking: false,
            store: this._store,
            editingConfig: {
                publishMessages: false
            }
        });
    },

    _getColumnCfgs: function() {
        var columns = [
            {
                text: 'Column',
                dataIndex: 'column',
                emptyCellText: 'None',
                flex: 2
            },
            {
                text: 'Show',
                dataIndex: 'shown',
                flex: 1,
                renderer: function (value) {
                    return value === true ? 'Yes' : 'No';
                },
                editor: {
                    xtype: 'rallycombobox',
                    displayField: 'name',
                    valueField: 'value',
                    editable: false,
                    storeType: 'Ext.data.Store',
                    storeConfig: {
                        remoteFilter: false,
                        fields: ['name', 'value'],
                        data: [
                            {'name': 'Yes', 'value': true},
                            {'name': 'No', 'value': false}
                        ]
                    }
                }
            },
            {
                text: 'WIP',
                dataIndex: 'wip',
                flex: 1,
                emptyCellText: '&#8734;',
                editor: {
                    xtype: 'rallytextfield',
                    maskRe: /[0-9]/,
                    validator: function (value) {
                        return (value === '' || (value > 0 && value <= 9999)) || 'WIP must be > 0 and < 9999.';
                    },
                    rawToValue: function (value) {
                        return value === '' ? value : parseInt(value, 10);
                    }
                }
            }/*,
            {
                text: 'Schedule State Mapping',
                dataIndex: 'scheduleStateMapping',
                emptyCellText: '--No Mapping--',
                flex: 2,
                editor: {
                    xtype: 'rallyfieldvaluecombobox',
                    model: Ext.identityFn('HierarchicalRequirement'),
                    field: 'ScheduleState',
                    listeners: {
                        ready: function (combo) {
                            var noMapping = {};
                            noMapping[combo.displayField] = '--No Mapping--';
                            noMapping[combo.valueField] = '';

                            combo.store.insert(0, [noMapping]);
                        }
                    }
                }
            },
            {
                text: 'Defect State Mapping',
                dataIndex: 'stateMapping',
                emptyCellText: '--No Mapping--',
                flex: 2,
                editor: {
                    xtype: 'rallyfieldvaluecombobox',
                    model: Ext.identityFn('Defect'),
                    field: 'State',
                    listeners: {
                        ready: function (combo) {
                            var noMapping = {};
                            noMapping[combo.displayField] = '--No Mapping--';
                            noMapping[combo.valueField] = '';

                            combo.store.insert(0, [noMapping]);
                        }
                    }
                }
            }*/
        ];

        if (this.shouldShowColumnLevelFieldPicker) {
            columns.push({
                text: 'Fields',
                dataIndex: 'cardFields',
                width: 300,
                tdCls: Rally.util.Test.toBrowserTestCssClass('cardfields', ''),
                renderer: this._getRendererForCardFields,
                scope: this,
                editor: {
                    xtype: 'kanbancolumncardfieldpicker',
                    cls: 'card-fields',
                    margin: 0,
                    modelTypes: ['UserStory', 'Defect'],
                    autoExpand: true,
                    alwaysExpanded: false,
                    hideTrigger: true,
                    fieldBlackList: ['DisplayColor'],
                    alwaysSelectedValues: ['FormattedID', 'Name', 'Owner'],
                    storeConfig: {
                        autoLoad: false
                    },
                    listeners: {
                        selectionchange: function (picker) {
                            picker.validate();
                        },
                        rightactionclick: this._updateColumnCardFieldSettings,
                        scope: this
                    }
                }
            });
        }
        return columns;
    },

    /**
     * When a form asks for the data this field represents,
     * give it the name of this field and the ref of the selected project (or an empty string).
     * Used when persisting the value of this field.
     * @return {Object}
     */
    getSubmitData: function() {
        var data = {};
        data[this.name] = Ext.JSON.encode(this._buildSettingValue());
        return data;
    },

    _getRendererForCardFields: function(fields) {
        var valWithoutPrefixes = [];
        Ext.Array.each(this._getCardFields(fields), function(field) {
            valWithoutPrefixes.push(field.replace(/^c_/, ''));
        });
        return valWithoutPrefixes.join(', ');
    },

    _getCardFields: function(fields) {
        if (Ext.isString(fields) && fields) {
            return fields.split(',');
        }
        var val = ['FormattedID','Name','Owner'];
        Ext.Array.each(fields, function (currentItem) {
            if (currentItem && currentItem.data && !Ext.Array.contains(val, currentItem.data.name)) {
                val.push(currentItem.data.name);
            }
        });
        return val;
    },

    _updateColumnCardFieldSettings: function(picker, selectedRecord, value, initialText) {
        this._store.each(function(record) {
            if (record.get('shown')) {
                var cardFields = this._getCardFields(record.get('cardFields'));

                if (initialText) {
                    if (!Ext.Array.contains(cardFields, selectedRecord.get('name'))) {
                        cardFields.push(selectedRecord.get('name'));
                    }
                } else {
                    Ext.Array.remove(cardFields, selectedRecord.get('name'));
                }
                record.set('cardFields', cardFields.join(','));
            }
        }, this);

        this._store.loadRawData(this._store.getRange());
    },

    _buildSettingValue: function() {
        var columns = {};
        this._store.each(function(record) {
            if (record.get('shown')) {
                columns[record.get('column')] = {
                    wip: record.get('wip'),
                    scheduleStateMapping: record.get('scheduleStateMapping'),
                    stateMapping: record.get('stateMapping')
                };
                if (this.shouldShowColumnLevelFieldPicker) {
                    var cardFields = this._getCardFields(record.get('cardFields'));
                    columns[record.get('column')].cardFields = cardFields.join(',');
                }
            }
        }, this);
        return columns;
    },

    getErrors: function() {
        var errors = [];
        if (this._storeLoaded && !Ext.Object.getSize(this._buildSettingValue())) {
            errors.push('At least one column must be shown.');
        }
        return errors;
    },

    setValue: function(value) {
        this.callParent(arguments);
        this._value = value;
    },

    _getColumnValue: function(columnName) {
        var value = this._value;
        return value && Ext.JSON.decode(value)[columnName];
    },

    refreshWithNewField: function(field) {
        delete this._storeLoaded;
        field.getAllowedValueStore().load({
            callback: function(records, operation, success) {
                var data = Ext.Array.map(records, this._recordToGridRow, this);
                this._store.loadRawData(data);
                this.fireEvent('ready');
                this._storeLoaded = true;
            },
            scope: this
        });
    },

    _recordToGridRow: function(allowedValue) {
        var columnName = allowedValue.get('StringValue');
        var pref = this._store.getCount() === 0 ? this._getColumnValue(columnName) : null;

        var column = {
            column: columnName,
            shown: false,
            wip: '',
            scheduleStateMapping: '',
            stateMapping: '',
            cardFields: this.defaultCardFields
        };

        if (pref) {
            Ext.apply(column, {
                shown: true,
                wip: pref.wip,
                scheduleStateMapping: pref.scheduleStateMapping,
                stateMapping: pref.stateMapping
            });

            if (pref.cardFields) {
                Ext.apply(column, {
                    cardFields: pref.cardFields
                });
            }
        }

        return column;

    }
});

/**
 * Allows configuring of rows for the cardboard
 *
 *
 *      @example
 *      Ext.create('Ext.Container', {
 *          items: [{
 *              xtype: 'rowsettingsfield',
 *              value: {
 *                  show: true,
 *                  field: 'c_ClassofService'
 *              }
 *          }],
 *          renderTo: Ext.getBody().dom
 *      });
 *
 */
Ext.define('Rally.apps.common.RowSettingsField', {
    alias: 'widget.rowsettingsfield',
    extend: 'Ext.form.FieldContainer',
    requires: [
        'Rally.ui.CheckboxField',
        'Rally.ui.combobox.ComboBox',
        'Rally.ui.plugin.FieldValidationUi',
        'Rally.data.ModelFactory',
        'Rally.data.wsapi.ModelBuilder'
    ],

    mixins: {
        field: 'Ext.form.field.Field'
    },

    layout: 'hbox',

    cls: 'row-settings',

    config: {
        /**
         * @cfg {Object}
         *
         * The row settings value for this field
         */
        value: undefined,

        /**
         * @cfg {Function}
         * A function which should return true if the specified field should
         * be included in the list of available swimlane fields
         * @param {Rally.data.wsapi.Field} field
         */
        isAllowedFieldFn: Ext.emptyFn,

        /**
         * @cfg {Object[]}
         *
         * Array of objects with name and value keys to be used by the row combobox
         * [{'name': 'Blocked', 'value': 'Blocked'},{'name': 'Owner', 'value': 'Owner'}]
         */
        explicitFields: [],

        /**
         * @cfg {String[]}
         * Array of models for which to list fields for
         */
        modelNames: ['portfolioitem/feature'],

        /**
         * @cfg {String[]}
         * Array of field display names to show if found on at least 1 model, sortable and are not hidden
         */
        whiteListFields: []
    },

    initComponent: function() {
        this.callParent(arguments);

        this.mixins.field.initField.call(this);

        this.add([
            {
                xtype: 'rallycheckboxfield',
                name: 'showRows',
                boxLabel: '',
                margin: '0',
                submitValue: false,
                value: this.getValue().showRows,
                listeners: {
                    change: function(checkbox, checked) {
                        this.down('rallycombobox').setDisabled(!checked);
                    },
                    scope: this
                }
            },
            {
                xtype: 'rallycombobox',
                plugins: ['rallyfieldvalidationui'],
                name: 'rowsField',
                margin: '0 6px',
                width: 130,
                emptyText: 'Choose Field...',
                displayField: 'name',
                valueField: 'value',
                disabled: this.getValue().showRows !== 'true',
                editable: false,
                submitValue: false,
                storeType: 'Ext.data.Store',
                storeConfig: {
                    remoteFilter: false,
                    fields: ['name', 'value'],
                    data: []
                }
            }
        ]);

        this._loadModels();
    },

    _loadModels: function() {
        Rally.data.ModelFactory.getModels({
            types: this.getModelNames(),
            context: this.context,
            success: this._onModelsRetrieved,
            scope: this
        });
    },

    _onModelsRetrieved: function (models) {
        var fields = _.uniq(Ext.Array.merge(this.explicitFields, this._getRowableFields(_.values(models))), 'name');
        var combobox = this.down('rallycombobox');
        combobox.getStore().loadData(_.sortBy(fields, 'name'));
        combobox.setValue(this.getValue().rowsField);
        this.fireEvent('ready', this);
    },

    _getRowableFields: function (models) {
        var artifactModel = Rally.data.wsapi.ModelBuilder.buildCompositeArtifact(models, this.context),
            allFields = artifactModel.getFields(),
            rowableFields = _.filter(allFields, function (field) {
                var attr = field.attributeDefinition;
                return attr && !attr.Hidden && attr.Sortable &&
                    ((artifactModel.getModelsForField(field).length === models.length &&
                    this.isAllowedFieldFn(field)) || _.contains(this.whiteListFields, field.displayName));
            }, this);

        return _.map(rowableFields, function(field) {
            return {
                name: field.displayName,
                value: field.name
            };
        });
    },

    /**
     * When a form asks for the data this field represents,
     * give it the name of this field and the ref of the selected project (or an empty string).
     * Used when persisting the value of this field.
     * @return {Object}
     */
    getSubmitData: function() {
        var data = {},
            showField = this.down('rallycheckboxfield'),
            rowsField = this.down('rallycombobox'),
            showRows = showField.getValue() && !_.isEmpty(rowsField.getValue());
        data[showField.name] = showRows;
        if (showRows) {
            data[rowsField.name] = rowsField.getValue();
        }
        return data;
    },

    refreshWithNewModelType: function(type) {
        this.setModelNames([type]);
        this._loadModels();
    }
});

Ext.define('Rally.apps.kanban.Settings', {
    singleton: true,
    requires: [
        'Rally.apps.kanban.ColumnSettingsField',
        'Rally.apps.common.RowSettingsField',
        'Rally.ui.combobox.FieldComboBox',
        'Rally.ui.CheckboxField',
        'Rally.ui.plugin.FieldValidationUi'
    ],

    getFields: function(config) {
        var items = [
            {
                name: 'groupByField',
                xtype: 'rallyfieldcombobox',
                model: Ext.identityFn('User Story'),
                margin: '10px 0 0 0',
                fieldLabel: 'Columns',
                listeners: {
                    select: function(combo) {
                        this.fireEvent('fieldselected', combo.getRecord().get('fieldDefinition'));
                    },
                    ready: function(combo) {
                        combo.store.filterBy(function(record) {
                            var attr = record.get('fieldDefinition').attributeDefinition;
                            return attr && !attr.ReadOnly && attr.Constrained && attr.AttributeType !== 'OBJECT' && attr.AttributeType !== 'COLLECTION';
                        });
                        if (combo.getRecord()) {
                            this.fireEvent('fieldselected', combo.getRecord().get('fieldDefinition'));
                        }
                    }
                },
                bubbleEvents: ['fieldselected', 'fieldready']
            },
            
            {
                name: 'columns',
                readyEvent: 'ready',
                fieldLabel: '',
                margin: '5px 0 0 80px',
                xtype: 'kanbancolumnsettingsfield',
                shouldShowColumnLevelFieldPicker: config.shouldShowColumnLevelFieldPicker,
                defaultCardFields: config.defaultCardFields,
                handlesEvents: {
                    fieldselected: function(field) {
                        this.refreshWithNewField(field);
                    }
                },
                listeners: {
                    ready: function() {
                        this.fireEvent('columnsettingsready');
                    }
                },
                bubbleEvents: 'columnsettingsready'
            }
        ];

//        items.push({
//            name: 'groupHorizontallyByField',
//            xtype: 'rowsettingsfield',
//            fieldLabel: 'Swimlanes',
//            margin: '10 0 0 0',
//            mapsToMultiplePreferenceKeys: ['showRows', 'rowsField'],
//            readyEvent: 'ready',
//            isAllowedFieldFn: function(field) {
//                var attr = field.attributeDefinition;
//                return (attr.Custom && (attr.Constrained || attr.AttributeType.toLowerCase() !== 'string') ||
//                    attr.Constrained || _.contains(['boolean'], attr.AttributeType.toLowerCase())) &&
//                    !_.contains(['web_link', 'text', 'date'], attr.AttributeType.toLowerCase());
//            },
//            explicitFields: [
//                {name: 'Sizing', value: 'PlanEstimate'}
//           ]
//        });
//
//        items.push(
//            {
//                name: 'hideReleasedCards',
//                xtype: 'rallycheckboxfield',
//                fieldLabel: 'Options',
//                margin: '10 0 0 0',
//                boxLabel: 'Hide cards in last visible column if assigned to a release'
//            },
//            {
//                type: 'cardage',
//                config: {
//                    fieldLabel: '',
//                    margin: '5 0 10 80'
//                }
//            },
//            {
//                type: 'query'
//            });

        return items;
    }
});
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350, 
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        console.log("_checkChecksum", container);
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if (! app.isExternal() ) {
                
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.override(Rally.ui.gridboard.GridBoard,{
    applyCustomFilter: function(filterObj) {
        var gridOrBoard = this.getGridOrBoard();

        this.currentCustomFilter = filterObj;

        if (gridOrBoard) {
            if (this.getToggleState() === 'board') {
                this._applyBoardFilters(gridOrBoard, filterObj);
            } else {
                this._applyGridFilters(gridOrBoard, filterObj);
            }
        }
        /**
         * Call your code here or fire an event from the gridboard.  
         * If you fire an event from ere, you can put a listener on the gridboard
         */
        this.fireEvent('filterschanged', filterObj.filters);
    } 
});
Ext.define("SKF", {
    extend: 'Rally.app.App',
    cls: 'kanban',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },
    items: [
        {xtype:'container',itemId:'selector_box',layout:{type:'hbox'}},
        {xtype:'container',itemId:'display_box'}
    ],
    settingsScope: 'project',
    autoScroll: false,
    
    mixins: [
        'Rally.Messageable'
    ],
    
    config: {
        defaultSettings: {
            groupByField: 'c_BusinessState',
            showRows: false,
            columns: Ext.JSON.encode({
                None: {wip: ''}
            }),
            cardFields: 'FormattedID,Name,Owner', //remove with COLUMN_LEVEL_FIELD_PICKER_ON_KANBAN_SETTINGS
            hideReleasedCards: false,
            showCardAge: true,
            cardAgeThreshold: 3,
            pageSize: 25
        }
    },
                        
    launch: function() {
        var me = this;
        Rally.data.ModelFactory.getModel({
            type: 'User Story',
            success: me._onModelRetrieved,
            scope: me
        });
        me.initiativeObjectID = 0;
        me.add(
            {
                xtype:'rallycombobox',
                fieldLabel: 'Initiative: ',
                labelWidth: 125,
                labelAlign: 'left',
                noEntryText: 'All',
                noEntryValue: 0,
                storeConfig: {
                    model: 'PortfolioItem/Initiative',
                    fetch: ['FormattedID','ObjectID','Name'],
                    remoteFilter: false,
                    autoLoad: true,
                    limit: Infinity,
                    listeners:{
                            load:function (store) {
                                store.add({ObjectID:0, FormattedID:'All',Name:''});  //adding empty record
                            }
                    }
                },
                listeners:{
                    select:function(cb){
                        me.initiativeObjectID = cb.value;
                        console.log('cb.value>>',cb.value);
                        me._addCardboardContent();
                    }
                },
                allowNoEntry: true,
                itemId: 'cb-portfolioitem',
                margin: 10,
                valueField: 'ObjectID',
                displayField: 'FormattedID',
                width: 600
                ,
                listConfig: {
                    itemTpl: '<tpl if="ObjectID &gt; -1">{FormattedID}: {Name}</tpl>'
                },
                filterProperties: ['Name','FormattedID','ObjectID'],
                fieldCls: 'pi-selector',
                displayTpl: '<tpl for=".">' +
                '<tpl if="ObjectID &gt; -1 ">' +
                '{[values["FormattedID"]]}: {[values["Name"]]}' +
                '</tpl>' +
                '<tpl if="xindex < xcount">,</tpl>' +
                '</tpl>'
            }
        );
        
    },

    _onModelRetrieved: function(model) {
        this.logger.log("_onModelRetrieved",model);
        this.groupByField = model.getField(this.getSetting('groupByField'));
        this._addCardboardContent();
    },

    _addCardboardContent: function() {
        this.logger.log('_addCardboardContent');
        
        if ( this.gridboard) { this.gridboard.destroy(); }
        
        var cardboardConfig = this._getCardboardConfig();

        var columnSetting = this._getColumnSetting();
        if (columnSetting) {
            cardboardConfig.columns = this._getColumnConfig(columnSetting);
        }

        var cardboard_config = this._getGridboardConfig(cardboardConfig);
        this.logger.log('config:', cardboard_config);

        this.gridboard = this.add(cardboard_config);
        //publish the gridboard
    },

    _getGridboardConfig: function(cardboardConfig) {
        var context = this.getContext(),
            modelNames = this._getDefaultTypes(),
            blacklist = ['Successors', 'Predecessors', 'DisplayColor'];

        return {
            xtype: 'rallygridboard',
            stateful: false,
            toggleState: 'board',
            cardBoardConfig: cardboardConfig,
            listeners: {
                            scope: this,
                            filterschanged: function(cb) {
                                console.log('cb >>>>>>>>>>>',cb);
                                this.filters = cb;
                                // this._publishFilter();

                            }
                        },
           plugins: [
               {
                   ptype: 'rallygridboardaddnew',
                   addNewControlConfig: {
                       listeners: {
                           beforecreate: this._onBeforeCreate,
                           beforeeditorshow: this._onBeforeEditorShow,
                           scope: this
                       },
                       stateful: true,
                       stateId: context.getScopedStateId('kanban-add-new')
                   }
               },
               {
                   ptype: 'rallygridboardcustomfiltercontrol',
                   filterChildren: true,
                   filterControlConfig: {
                       blackListFields: [],
                       //whiteListFields: ['Milestones'],
                       margin: '3 9 3 30',
                       modelNames: modelNames,
                       stateful: true,
                       stateId: context.getScopedStateId('kanban-custom-filter-button')
                      
                   },
                   showOwnerFilter: true,
                   ownerFilterControlConfig: {
                       stateful: true,
                       stateId: context.getScopedStateId('kanban-owner-filter')
                   }
               },
               {
                   ptype: 'rallygridboardfieldpicker',
                   headerPosition: 'left',
                   boardFieldBlackList: blacklist,
                   modelNames: modelNames,
                   boardFieldDefaults: this.getSetting('cardFields').split(',')
               },
               {
                   ptype: 'rallyboardpolicydisplayable',
                   prefKey: 'kanbanAgreementsChecked',
                   checkboxConfig: {
                       boxLabel: 'Show Agreements'
                   }
               }
           ],
            context: context,
            modelNames: modelNames,
            storeConfig: {
                filters: this._getFilters()
            },
            height: this.getHeight()
        };
    },

    _getColumnConfig: function(columnSetting) {
        this.logger.log('_getColumnConfig', columnSetting);
        var columns = [];
        Ext.Object.each(columnSetting, function(column, values) {
            var columnConfig = {
                xtype: 'kanbancolumn',
                enableWipLimit: true,
                wipLimit: values.wip,
                plugins: [{
                    ptype: 'rallycolumnpolicy',
                    app: this
                }],
                value: column,
                columnHeaderConfig: {
                    headerTpl: column || 'None'
                },
                listeners: {
                    invalidfilter: {
                        fn: this._onInvalidFilter,
                        scope: this
                    }
                }
            };
//            if(this._shouldShowColumnLevelFieldPicker()) {
//                columnConfig.fields = this._getFieldsForColumn(values);
//            }
            columns.push(columnConfig);
        }, this);

        columns[columns.length - 1].hideReleasedCards = this.getSetting('hideReleasedCards');

        return columns;
    },

    _getFieldsForColumn: function(values) {
        var columnFields = [];
//        if (this._shouldShowColumnLevelFieldPicker()) {
//            if (values.cardFields) {
//                columnFields = values.cardFields.split(',');
//            } else if (this.getSetting('cardFields')) {
//                columnFields = this.getSetting('cardFields').split(',');
//            }
//        }
        return columnFields;
    },

    _onInvalidFilter: function() {
        Rally.ui.notify.Notifier.showError({
            message: 'Invalid query: ' + this.getSetting('query')
        });
    },

    _getCardboardConfig: function() {
        var config = {
            xtype: 'rallycardboard',
            plugins: [
                //{ptype: 'rallycardboardprinting', pluginId: 'print'},
                {
                    ptype: 'rallyscrollablecardboard',
                    containerEl: this.getEl()
                },
                {ptype: 'rallyfixedheadercardboard'}
            ],
            types: this._getDefaultTypes(),
            attribute: this.getSetting('groupByField'),
            margin: '10px',
            context: this.getContext(),
            // listeners: {
            //    // beforecarddroppedsave: this._onBeforeCardSaved,
            //    // load: this._onBoardLoad,
            //    // cardupdated: this._publishContentUpdatedNoDashboardLayout,
            // },
            columnConfig: {
                xtype: 'rallycardboardcolumn',
                enableWipLimit: true
            },
            cardConfig: {
                editable: true,
                showIconMenus: true,
                showAge: this.getSetting('showCardAge') ? this.getSetting('cardAgeThreshold') : -1,
                showBlockedReason: true
            },
            storeConfig: {
                context: this.getContext().getDataContext()
            }
        };
        if (this.getSetting('showRows')) {
            Ext.merge(config, {
                rowConfig: {
                    field: this.getSetting('rowsField'),
                    sortDirection: 'ASC'
                }
            });
        }
        return config;
    },


    _getFilters: function() {
        var filters = [];
        var me = this;

        var andFilters;
        if(me.initiativeObjectID > 0){

            andFilters = Ext.create('Rally.data.wsapi.Filter',{
                property: 'Feature.Parent.Parent.ObjectID',
                value: me.initiativeObjectID
            });

        }else{

            andFilters = Ext.create('Rally.data.wsapi.Filter',{
                property: 'Feature.Parent.Parent.ObjectID',
                operator: '>',
                value: 0
            });
        
        }

        andFilters.and({
            property: 'Project',
            value: me.getContext().getProject()._ref
        });   

        if(this.getSetting('query')) {
            filters.push(Rally.data.QueryFilter.fromQueryString(this.getSetting('query')));
        }
        if(this.getContext().getTimeboxScope()) {
            filters.push(this.getContext().getTimeboxScope().getQueryFilter());
        }


        andFilters.and(filters);

        console.log('andFilters>>',andFilters);

        return andFilters;
    },

    _getColumnSetting: function() {
        var columnSetting = this.getSetting('columns');
        return columnSetting && Ext.JSON.decode(columnSetting);
    },

    _onBoardLoad: function() {
        this._publishContentUpdated();
        this.setLoading(false);
    },

    _onBeforeCreate: function(addNew, record, params) {
        Ext.apply(params, {
            rankTo: 'BOTTOM',
            rankScope: 'BACKLOG'
        });
        record.set(this.getSetting('groupByField'), this.gridboard.getGridOrBoard().getColumns()[0].getValue());
    },

    _onBeforeEditorShow: function(addNew, params) {
        params.rankTo = 'BOTTOM';
        params.rankScope = 'BACKLOG';
        params.iteration = 'u';

        var groupByFieldName = this.groupByField.name;

        params[groupByFieldName] = this.gridboard.getGridOrBoard().getColumns()[0].getValue();
    },

    _getDefaultTypes: function() {
        return ['User Story'];
//        return ['User Story', 'Defect'];
    },

    _onBeforeCardSaved: function(column, card, type) {
        var columnSetting = this._getColumnSetting();
        if (columnSetting) {
            var setting = columnSetting[column.getValue()];
//            
//            if (setting && setting.stateMapping && card.getRecord().get('_type') == 'defect') {
//                card.getRecord().set('State', setting.stateMapping);
//            }
        }
    },

    // _publishFilter: function() {
    //     this.publish('milestoneFilterChanged', this.filters);
    // },
    
    getOptions: function() {
        return [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            }
        ];
    },
    
    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },
    
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    },

    getSettingsFields: function() {
        return Rally.apps.kanban.Settings.getFields({
            //shouldShowColumnLevelFieldPicker: this._shouldShowColumnLevelFieldPicker(),
            defaultCardFields: this.getSetting('cardFields')
        });
    },
    
    //onSettingsUpdate:  Override
    onSettingsUpdate: function (settings){
        this.logger.log('onSettingsUpdate',settings);
        // Ext.apply(this, settings);
        this.launch();
    }
});

            
               Rally.launchApp('SKF', {
                   name: 'Story Kanban with Filter'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
    </style>

</head>
<body></body>
</html>